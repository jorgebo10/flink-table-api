import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.avro.tool.SpecificCompilerTool

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("java")
    id("application")
    `maven-publish`
    id("com.github.johnrengelman.shadow") version ("7.1.2")
}

group = "org.example"
version = "1.0-SNAPSHOT"
description = "Flink Quickstart Job"
java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

val avroSrc = "src/main/avro"
val avroJava = "build/generated/man-avro-java"

repositories {
    mavenLocal()
    maven {
        url = uri("https://repository.apache.org/content/repositories/snapshots/")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

buildscript {
    dependencies {
        classpath(libs.avro.tools)
    }
}

val flinkShadowJar by configurations.creating {
    exclude("org.apache.flink:force-shading")
    exclude("com.google.code.findbugs:jsr305")
    exclude("org.slf4j:slf4j-api")
}

sourceSets {
    main {
        java {
            srcDirs(avroJava)
        }
        compileClasspath += configurations["flinkShadowJar"]
        runtimeClasspath += configurations["flinkShadowJar"]
    }
    test {
        compileClasspath += configurations["flinkShadowJar"]
        runtimeClasspath += configurations["flinkShadowJar"]
    }
}


application {
    mainClass.set("com.hellofresh.customeractiviety.job.CustomerActivityJob")
}

dependencies {
    compileOnly(libs.org.slf4j.slf4j.api)
    flinkShadowJar(libs.org.apache.flink.flink.connector.kafka)
    compileOnly(libs.bundles.avro)
    implementation(libs.org.apache.flink.flink.avro.confluent.registry)
    runtimeOnly(libs.bundles.logback)
    implementation(libs.bundles.provided.flink)
    implementation(libs.org.apache.flink.connector.base)
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
    dependsOn("customAvroCodeGeneration")
}

tasks.withType<Javadoc> {
    options.encoding = "UTF-8"
}

tasks.withType<ShadowJar> {
    configurations += project.configurations["flinkShadowJar"]
}

tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = "com.hellofresh.customeractiviety.job.CustomerActivityJob"
        attributes["Built-By"] = System.getProperty("user.name")
        attributes["Build-Jdk"] = System.getProperty("java.version")
    }
}

tasks.register("customAvroCodeGeneration") {
    group = "Avro"
    description = "Generate Avro Java code from Avro schema files."
    inputs.dir(avroSrc)
    outputs.dirs(avroJava)

    logging.captureStandardOutput(LogLevel.INFO)
    logging.captureStandardError(LogLevel.ERROR)

    doLast {
        // Run the Avro code generation.
        SpecificCompilerTool().run(
            System.`in`, System.`out`, System.err, listOf(
                "-encoding", "UTF-8",
                "-string",
                "-fieldVisibility", "private",
                "schema", "$projectDir/$avroSrc", "$projectDir/$avroJava"
            )
        )
    }
}