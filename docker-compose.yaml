services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_DOCKER_TAG}
    hostname: zookeeper
    container_name: zookeeper
    healthcheck:
      test: echo srvr | nc zookeeper ${ZOOKEEPER_PORT} || exit 1
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    ports:
      - '${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}'

  kafka:
    image: confluentinc/cp-enterprise-kafka:${CONFLUENT_DOCKER_TAG}
    container_name: kafka
    healthcheck:
      test: [ "CMD", "/bin/kafka-topics", "--list", "--bootstrap-server=kafka:${KAFKA_PORT_INTERNAL}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:${KAFKA_PORT_INTERNAL},EXTERNAL://localhost:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: https://schema-registry:${SCHEMA_REGISTRY_PORT}
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - '${KAFKA_PORT}:${KAFKA_PORT}'

  control-center:
    image: confluentinc/cp-enterprise-control-center:${CONFLUENT_DOCKER_TAG}
    hostname: control-center
    container_name: control-center
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --fail --silent http://control-center:${CONTROL_CENTER_PORT} --output /dev/null || exit 1
    depends_on:
      schema-registry:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:${KAFKA_PORT_INTERNAL}
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: /connectors
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:${SCHEMA_REGISTRY_PORT}
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      PORT: ${CONTROL_CENTER_PORT}
    ulimits:
      nofile:
        soft: 5000
        hard: 5000
    ports:
      - ${CONTROL_CENTER_PORT}:${CONTROL_CENTER_PORT}

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_DOCKER_TAG}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://schema-registry:${SCHEMA_REGISTRY_PORT}/subjects --output /dev/null || exit 1
      retries: 20
      interval: 10s
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:${KAFKA_PORT_INTERNAL}
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:${SCHEMA_REGISTRY_PORT}
    ports:
      - '${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}'
